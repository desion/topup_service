/*************************************************************************
	> File Name: TopupImpl.cpp
	> Author: desionwang
	> Mail: wdxin1322@qq.com 
	> Created Time: Sat 08 Feb 2014 04:16:03 PM CST
 ************************************************************************/

#include "TopupImpl.h"
#include "TopupUtils.h"
#include "HttpClient.h"
using namespace std;
using namespace  ::topupinterface;

TopupImpl::TopupImpl(){
	m_topup_info = new TopupInfo();
}

TopupImpl::~TopupImpl(){
	delete m_topup_info;
}

//处理FCGI的请求，根据请求的URI判断如何处理
int TopupImpl::HandleRequest(TopupServer *tpServer,const TopupRequest& request, string &result){
	TP_WRITE_LOG(tpServer, "[%s]\t%s\t%s\t%d", request.uri.c_str()
			,request.query.c_str(), request.checksum.c_str(), request.itimestamp);
	const char *params = request.query.c_str();
	const char *uri = request.uri.c_str();
	uint32_t request_time = request.itimestamp;
	const char *md5str = request.checksum.c_str();
	const char *m_interface = NULL;
	//post的各个参数
	map<string, string> map_entitys;
	//解析post参数
	parse_params(params, &map_entitys);
	parse_query(params, m_topup_info);
	if(uri != NULL){
		m_interface = strrchr(uri, '/');
		if(m_interface == NULL){
			//TODO 输出错误
		}
	}
	//根据调用的URI参数判断调用的相应接口
	if(strcmp(m_interface, "topup") == 0){
		//调用充值接口
	}else if(strcmp(m_interface, "query") == 0){
		//调用查询订单查询接口
	}else if(strcmp(m_interface, "cancel") == 0){
		//调用取消接口
	}else if(strcmp(m_interface, "balance") == 0){
		//调用余额查询接口
	}
	map<string, string>::iterator it = map_entitys.begin();
#ifdef DEBUG
	for(;it != map_entitys.end(); ++it){
			printf("key:%s\tvalue:%s\n", it->first.c_str(), it->second.c_str());
	}
#endif
	return 0;
}

///充值接口用于天猫和下游订购用户
int TopupImpl::TmallCharge(TopupServer *tpServer, map<string, string> &params){
	//TODO 验证参数的正确性
	//http://host:port/resource?coopId=xxx&tbOrderNo=xxx&cardId=xxx&cardNum=xxx&customer=xxx&sum=xxx&gameId=xxx&section1=xxx&section2=xxx&notifyUrl=xxx&sign=xxx&version=xxx
	map<string, string>::iterator it;
	string coopId;			//商家编号
	string tbOrderNo;		//淘宝的订单号
	string cardId;			//充值卡商品编号
	int cardNum;			//充值卡数量
	string customer;		//手机号码
	double sum;				//本次充值总金额
	string tbOrderSnap;		//商品信息快照
	string notifyUrl;		//异同通知地址
	string sign;			//签名字符串
	string version;			//版本
	if((it = params.find("coopId")) == params.end()){
		return 1;
	}else{
		coopId = it->second;	
	}
	if((it = params.find("tbOrderNo")) == params.end()){
		return 1;
	}else{
		tbOrderNo = it->second;
	}
	if((it = params.find("cardId")) == params.end()){
		return 1;
	}else{
		cardId = it->second;
	}
	if((it = params.find("cardNum")) == params.end()){
		return 1;
	}else{
		cardNum = atoi(it->second.c_str());
	}
	if((it = params.find("customer")) == params.end()){
		return 1;
	}else{
		customer = it->second;
	}
	if((it = params.find("sum")) == params.end()){
		return 1;
	}else{
		sum = atof(it->second.c_str());
	}
	if((it = params.find("tbOrderSnap")) == params.end()){
		return 1;
	}else{
		tbOrderSnap = it->second;
	}
	if((it = params.find("sign")) == params.end()){
		return 1;
	}else{
		sign = it->second;
	}
	//TODO 选择正确的产品，所有产品信息加入缓存，商品更新发送通知，重新加载缓存
	//TODO 选择最优的渠道，渠道信息同样加入缓存，信息更新，重新加载
	//TODO 建立订单，订单创建采用append模式，快速，采用按天分表模式，保留一个月的数据
	//TODO 返回结果
	return 0;
}


///天猫查询接口，用于查询订单
int TopupImpl::TmallQuery(TopupServer *tpServer, map<string, string> &params){
	//验证参数的正确性
	map<string, string>::iterator it;
	string coopId;			//商家编号
	string tbOrderNo;		//淘宝的订单号
	string sign;			//签名字符串
	//查询订单
	//返回结果
	return 0;
}

//天猫回调接口，向TMALL发送回调请求，接口需要tmall和下游用户实现，该方法只发送回调请求
int TopupImpl::TmallNotify(TopupServer *tpServer, map<string, string> &params){
	//向天猫或下游订购用户发送回调请求
	//验证返回结果，并且实现重发策略
	return 0;
}

///只用于接收处理天猫的取消请求
int TopupImpl::TmallCancel(TopupServer *tpServer, map<string, string> &params){
	map<string, string>::iterator it;
	string coopId;			//商家编号
	string tbOrderNo;		//淘宝的订单号
	string sign;			//签名字符串
	return 0;
}

///用于处理下游订购用户的查询余额请求
int TopupImpl::GetBalance(map<string, string> &params, double &balance){
	//查询数据库，取得余额信息
	//返回余额信息
	return 0;
}

///回填充值结果，针对不同的请求，回填不同的xml结果
int TopupImpl::FillXMLResult(map<string, string> &params, RequestType req_type, int errno, string &result){
	//返回xml结果缓冲区
	char rest[2048] = {0};
	//充值返回结果
	if(req_type == CHARGE){
	
	}else if(req_type == QUERY){
		//查询订单返回结果
	}else if(req_type == CANCEL){
		//取消订单返回结果
	}else if(req_type == BALANCE){
		//查询余额返回结果
	}else if(req_type == NOTIFY){
		//接收回调通知返回结果
	}
	return 0;
}
